class Soultion:
  def is_island(self, grid):
    self.island_id = -1
    self.island_area = {}
    self.directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]

    for m in range(len(grid)):
      for n in range(len(grid[m])):
        if grid[m][n] == 1:
          island_area = self.dfs(grid, m, n)
          self.island_area[island_area] = island_area
          self. island_id  -= 1

    max_area = 0

    for m in range(len(grid)):
      for n in range(len(grid[m])):
        if not grid[m][n]:
          area = 1
          surrawndings = set()

          for m_inc, n_inc in self.directions:
            new_m = m_inc + m
            new_n = n_inc + m

            if (0 <= new_m < len(grid)) and (0 <= new_n < len(grid[m])) and grid[new_m][new_n]!= 0:
              surrawndings.add(grid[new_m][new_n])
            for island in surrawndings:
              area += self.island_area[island]
            max_area = max(max_area, area)
    return max_area if max_area else len[grid] **2

  def dfs(self, grid, m, n):
    if(0<= m < len(grid)) and (0<= len[grid[m]]) and grid[m][n] ==1:
      grid[m][n] = self.island_id
      for m_inc, n_inc in self.directions:
        area += self.dfs(grid, m + m_inc, n + n_inc)
      return area
    else:
      return 0








